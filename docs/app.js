/* bank-200.js
   يولّد 200 عنصراً (100 همزة متوسّطة + 100 همزة متطرّفة)
   مهيّأة للاستخدام مع app.js (ثلاثة خيارات/سؤال وموضع صحيح عشوائي داخل app.js)
*/

// ————————————————————————————————
// ١) بذور مختارة للهمزة المتوسّطة (أمثلة شائعة وصحيحة)
const BASE_MID = [
  "يَأْكُل","سَأَل","رَأْس","مَسْأَلة","يَسْأَل","فَأْر","مَأْكَل","مَأْمَن","مَأْخَذ","يَأْس",
  "مُؤْمِن","مُؤْتَمَر","يُؤْمِن","يُؤْثِر","مُؤَجَّل","مُؤْذٍ","مَسْؤُول","سُؤَال","تَفاؤُل","مُؤْنِس",
  "سَئِم","مِئْذَنة","فِئَة","بَائِس","سَائِل","سَائِح","مَرْئِيّ","تَنْشِئَة","بِيئَة","قِرَاءَة",
  "يَتَفَأَّل","مَأْسَاة","مُؤْتَمَن","مُؤْلِم","مُؤْذِي","مُؤَسَّسَة","مُؤَكَّد","مُؤَيَّد","مُؤَاخَذَة","مُؤَازَرَة",
  "رَئِيس","كَفَاءَة","مُلَاءَمَة","مَبَادِئ","قَرَائِن","مَلَائِكَة","سَيِّئَة","هَنِيئًا","مَرِيئًا","بَرِيء",
  "قَارِئ","مُنْشِئ","مُنْشَأ","تَأْثِير","تَأْمِين","تَأْسِيس","تَأْلِيف","تَأْهِيل","تَأْكِيد","مَأْهُول",
  "مَأْمُون","مَأْوًى","مُؤَخَّر","مُؤَقَّت","مُؤَثِّر","مُؤَيِّد","مُؤْسِف","مُؤْتَمِن","مُؤْتَلِف","مُؤْتَنِف",
  "قُرِئَ","قَرِئَ","قَارِئات","تَسْوِئَة","تَنْبِئَة","تَوْقِئَة","نَشْأَة","سَأَم","مَلَائِم","سَائِل",
  "مَسَائِل","مَبَائِث","نَبَائِغ","قَرَائِيّ","ضَوْء","إضَاءَة","مُؤْتِي","مُؤْتًى","مُؤْتُون","مُؤْهِل"
];

// ٢) بذور مختارة للهمزة المتطرّفة
const BASE_END = [
  "بَدَأ","نَشَأ","قَرَأ","مَلْجَأ","مَبْدَأ","شَيْء","جُزْء","سَمَاء","مَاء","مَسَاء",
  "دُعَاء","بِنَاء","رِدَاء","عِبْء","دِفْء","بُطْء","مِلْء","بَرِيء","هَنِيئًا","مَرِيئًا",
  "قَارِئ","بَادِئ","بَارِئ","مَبْدَأُه","مَلْجَؤُه","يَقْرَأُ","تَقْرَأُ","نَقْرَأُ","يَبْدَأُ","تَبْدَأُ",
  "يَجْرُؤُ","تَجْرُؤُ","جُرْؤٌ","جُرْؤًا","سُوء","سُوءًا","مُرُوءَة","بُرْء","نَشْء","دَرْء",
  "سَمَاءٌ","سَمَاءً","صَحْرَاء","بَيْدَاء","بَيْضَاء","سَمْرَاء","خَضْرَاء","ابْتِدَاء","انْتِهَاء","ابْتِدَاءً",
  "مَلْءٌ","مِلْئًا","مِلْءَهُ","شَيْئًا","جُزْءًا","عِبْئًا","دِفْئًا","بُطْئًا","مَلْءَ","شَيْءَ",
  "جُزءَ","قَرءَ","مَرءَ","دِفءَ","بُطءَ","مَلءَ","قَارِئٌ","قَارِئًا","قَارِئٍ","بَرِيئٌ",
  "بَرِيئًا","بَرِيئٍ","بَادِئٌ","بَادِئًا","بَادِئٍ","مَلْجَأً","مَبْدَأً","مَنْشَأ","مَنْشَأً","مَأْوَى"
];

// ————————————————————————————————
// توسيع تلقائي بسيط لإنتاج 100 + 100
function uniq(arr) {
  const out = [];
  const seen = new Set();
  for (const w of arr) {
    if (!seen.has(w)) { out.push(w); seen.add(w); }
  }
  return out;
}

function expandMid(seed) {
  // أشكال خفيفة تُحافظ على الهمزة المتوسّطة وتضيف تنوين/تصاريف
  const forms = [seed];
  // تنوين إن أمكن (نضيف اختياريًا شكلًا بالحركات)
  if (!/[ًٌٍ]$/.test(seed)) {
    forms.push(seed + "ً"); // تنوين فتح (للعرض فقط)
  }
  // إضافة ضمير/لاحقة بسيطة إن كانت الكلمة اسمًا
  if (!seed.includes("ُ ") && !seed.endsWith("ٌ")) {
    forms.push(seed.replace(/\s+$/,"") + "هِ"); // مثال: قِرَاءَةِهِ (مجرد تنويع)
  }
  return uniq(forms);
}

function expandEnd(seed) {
  // المحافظة على الهمزة المتطرّفة وإضافة تنوين/ضمائر طبيعية
  const forms = [seed];
  // أشكال بالتنوين (إن لم تكن موجودة)
  if (!/[ًٌٍ]$/.test(seed) && !seed.endsWith("ٌ")) {
    forms.push(seed.replace(/\s*$/, "ً")); // تنوين فتح
  }
  // إضافة أل التعريف أو ضمير ملكي
  if (!/^ال/.test(seed)) {
    forms.push("ال" + seed);
  }
  if (!seed.endsWith("ه")) {
    forms.push(seed + "ه"); // ملجأه / مبدأه ...
  }
  return uniq(forms);
}

// ابنِ قوائم نهائية 100/100
function buildList(base, expander, targetCount) {
  const out = [];
  let i = 0;
  while (out.length < targetCount) {
    const seed = base[i % base.length];
    const ex = expander(seed);
    for (const w of ex) {
      if (out.length < targetCount) out.push(w);
      else break;
    }
    i++;
    if (i > 2000) break; // حارس أمان
  }
  return uniq(out).slice(0, targetCount);
}

const MID_LIST = buildList(BASE_MID, expandMid, 100);   // 100 متوسّطة
const END_LIST = buildList(BASE_END, expandEnd, 100);   // 100 متطرّفة

// ————————————————————————————————
// تحويل إلى BANK (صيغة مفهومة لـ app.js)
const BANK = [
  ...MID_LIST.map(w => ({ prompt: w, correct: w })),
  ...END_LIST.map(w => ({ prompt: w, correct: w })),
];

// للتأكيد في الـ Console
console.log(`bank-200.js: built BANK with ${BANK.length} items (mid: ${MID_LIST.length}, end: ${END_LIST.length})`);
